# create object and limit features to the 5 confirmed features from the boruta analysis + the dependent variable
col_order = c("Month", "Transaction_Time", "Amount", "Use_Chip","Merchant_State","MCC","Is_Fraud")
View(creditcard_balanced_over)
creditcard_balanced_over = creditcard_balanced_over[, col_order]
setwd("C:/Users/TOBI/Downloads/Final Year Projects/New Project Latest Codes")
creditcard = read.csv("User0_credit_card_transactions.csv")
names(creditcard)
creditcard = creditcard[,-c(1:3,5,9:10,12,14)]
names(creditcard)
library(dplyr) # A grammar for data manipulation
creditcard = creditcard %>%
rename(
Is_Fraud = Is.Fraud.,
Use_Chip = Use.Chip,
Transaction_Time = Time,
Merchant_State = Merchant.State
)
summary(creditcard)
str(creditcard)
Multicreditcard = cbind.data.frame(creditcard)
attach(creditcard)
library(tidyr)
"Transaction_Time"
creditcard <- creditcard %>%
separate(Transaction_Time, c("H", "M"), sep=":", remove = FALSE) %>%
mutate(H = as.numeric(H)) %>%
mutate(Transaction_Time = (H))
creditcard = creditcard[,-c(3:4)]
"Amount"
table(Amount)
creditcard$Amount = as.integer(creditcard$Amount)
"Merchant_State"
table(Merchant_State)
creditcard$Merchant_State = as.character(creditcard$Merchant_State)
creditcard$Merchant_State[creditcard$Merchant_State == "CA"] <- 1
creditcard$Merchant_State[creditcard$Merchant_State == "NE"] <- 2
creditcard$Merchant_State[creditcard$Merchant_State == "IL"] <- 3
creditcard$Merchant_State[creditcard$Merchant_State == "MO"] <- 4
creditcard$Merchant_State[creditcard$Merchant_State == "Switzerland"] <- 5
creditcard$Merchant_State[creditcard$Merchant_State == "IA"] <- 6
creditcard$Merchant_State[creditcard$Merchant_State == "TX"] <- 7
creditcard$Merchant_State[creditcard$Merchant_State == "Estonia"] <- 8
creditcard$Merchant_State[creditcard$Merchant_State == "NJ"] <- 9
creditcard$Merchant_State[creditcard$Merchant_State == "NV"] <- 10
creditcard$Merchant_State[creditcard$Merchant_State == "NY"] <- 11
creditcard$Merchant_State[creditcard$Merchant_State == "Japan"] <- 12
creditcard$Merchant_State[creditcard$Merchant_State == "AZ"] <- 13
creditcard$Merchant_State[creditcard$Merchant_State == "UT"] <- 14
creditcard$Merchant_State[creditcard$Merchant_State == "FL"] <- 15
creditcard$Merchant_State[creditcard$Merchant_State == "MI"] <- 16
creditcard$Merchant_State[creditcard$Merchant_State == "Mexico"] <- 17
creditcard$Merchant_State[creditcard$Merchant_State == "WA"] <- 18
creditcard$Merchant_State[creditcard$Merchant_State == "OH"] <- 19
creditcard$Merchant_State[creditcard$Merchant_State == "Dominican Republic"] <- 20
creditcard$Merchant_State[creditcard$Merchant_State == "NM"] <- 21
creditcard$Merchant_State[creditcard$Merchant_State == "China"] <- 22
creditcard$Merchant_State[creditcard$Merchant_State == "SC"] <- 23
creditcard$Merchant_State[creditcard$Merchant_State == "AK"] <- 24
creditcard$Merchant_State[creditcard$Merchant_State == "PA"] <- 25
creditcard$Merchant_State[creditcard$Merchant_State == "VA"] <- 26
creditcard$Merchant_State[creditcard$Merchant_State == "Portugal"] <- 27
creditcard$Merchant_State[creditcard$Merchant_State == "HI"] <- 28
creditcard$Merchant_State[creditcard$Merchant_State == "CT"] <- 29
creditcard$Merchant_State[creditcard$Merchant_State == "MA"] <- 30
creditcard$Merchant_State[creditcard$Merchant_State == "MN"] <- 31
creditcard$Merchant_State[creditcard$Merchant_State == "CO"] <- 32
creditcard$Merchant_State[creditcard$Merchant_State == "Italy"] <- 33
creditcard$Merchant_State[creditcard$Merchant_State == "GA"] <- 34
creditcard$Merchant_State[creditcard$Merchant_State == "Philippines"] <- 35
creditcard$Merchant_State[creditcard$Merchant_State == "Jamaica"] <- 36
creditcard$Merchant_State[creditcard$Merchant_State == "AR"] <- 37
creditcard$Merchant_State[creditcard$Merchant_State == "Canada"] <- 38
creditcard$Merchant_State[creditcard$Merchant_State == "OR"] <- 39
creditcard$Merchant_State[creditcard$Merchant_State == "WI"] <- 40
creditcard$Merchant_State = as.integer(creditcard$Merchant_State)
"Use_Chip"
table(Use_Chip)
creditcard$Use_Chip = as.character(creditcard$Use_Chip)
creditcard$Use_Chip[creditcard$Use_Chip == "Swipe Transaction"] <- 1
creditcard$Use_Chip[creditcard$Use_Chip == "Online Transaction"] <- 2
creditcard$Use_Chip[creditcard$Use_Chip == "Chip Transaction"] <- 3
creditcard$Use_Chip = as.integer(creditcard$Use_Chip)
"Is_Fraud"
table(Is_Fraud)
creditcard$Is_Fraud = as.character(creditcard$Is_Fraud)
creditcard$Is_Fraud[creditcard$Is_Fraud == "No"] <- 0
creditcard$Is_Fraud[creditcard$Is_Fraud == "Yes"] <- 1
creditcard$Is_Fraud = as.integer(creditcard$Is_Fraud)
str(creditcard)
summary(creditcard)
creditcard <- na.omit(creditcard)
Multicreditcard <-na.omit(Multicreditcard)
library(mlbench)
library(caret)
creditcard$Is_Fraud = as.factor(as.integer(creditcard$Is_Fraud))
library(ROSE)
creditcard_balanced_over <- ovun.sample(Is_Fraud ~ ., data = creditcard, method = "both",N = 19963)$data
table(creditcard_balanced_over$Is_Fraud)
library(Boruta)
# Feature Selection operation
set.seed(7)
boruta = Boruta(creditcard_balanced_over$Is_Fraud~.,data = creditcard_balanced_over, doTrace = 5, maxRuns = 100)
plot(boruta, las = 2, cex.axis = 0.5)
attStats(boruta)
# create object and limit features to the 5 confirmed features from the boruta analysis + the dependent variable
col_order = c("Month", "Transaction_Time", "Amount", "Use_Chip","Merchant_State","MCC","Is_Fraud")
View(creditcard_balanced_over)
creditcard_balanced_over = creditcard_balanced_over[, col_order]
str(creditcard_balanced_over)
levels(creditcard_balanced_over$Is_Fraud)
#Not a fraudulent transaction
No = creditcard_balanced_over[creditcard_balanced_over$Is_Fraud == 0,]
#A fraudulent transaction
Yes = creditcard_balanced_over[creditcard_balanced_over$Is_Fraud == 1,]
set.seed(7)
validationIndex = createDataPartition(creditcard_balanced_over$Is_Fraud, p=0.70, list = FALSE)
#select 30% of the data for validation
validation = creditcard_balanced_over[-validationIndex,]
#use the remaining 70% of data to train the model
dataset = creditcard_balanced_over[validationIndex,]
# Check that the distribution of the dependent variable is similar in train and test sets
prop.table(table(creditcard_balanced_over$Is_Fraud))
prop.table(table(dataset$Is_Fraud))
prop.table(table(validation$Is_Fraud))
trainControl = trainControl(method = "repeatedcv", number = 10, repeats = 3)
metric = "Accuracy"
#1 LG
set.seed(7)
fit.glm = train(Is_Fraud~., data=dataset, method="glm", metric=metric, trControl=trainControl)
#2 LDA
set.seed(7)
fit.lda = train(Is_Fraud~., data=dataset, method="lda", metric=metric, trControl=trainControl)
#3 NB
set.seed(7)
fit.naive_bayes = train(Is_Fraud~., data=dataset, method="naive_bayes", metric=metric, trControl=trainControl)
#4 SVM
set.seed(7)
fit.svmLinear = train(Is_Fraud~., data=dataset, method="svmLinear", metric=metric, trControl=trainControl)
#5 XGB
set.seed(7)
fit.xgbTree = train(Is_Fraud~., data=dataset, method="xgbTree", metric=metric, trControl=trainControl)
#6 KNN
set.seed(7)
fit.knn = train(Is_Fraud~., data=dataset, method="knn", metric=metric, trControl=trainControl)
#7 CART
set.seed(7)
fit.cart = train(Is_Fraud~., data=dataset, method="rpart", metric=metric, trControl=trainControl)
#8 Random Forest
set.seed(7)
fit.rf = train(Is_Fraud~., data=dataset, method="rf", metric=metric, trControl = trainControl)
# Compare algorithms
results = resamples(list(LG=fit.glm, LDA=fit.lda, NB=fit.naive_bayes, SVM=fit.svmLinear, XGB=fit.xgbTree, KNN=fit.knn, CART=fit.cart, RF=fit.rf))
summary(results)
dotplot(results)
trainControl = trainControl(method="repeatedcv", number=10, repeats=3)
metric = "Accuracy"
#RF
set.seed(7)
grid = expand.grid(mtry = seq(1,10, by=1))
fit.RF_tuned = train(Is_Fraud~.,data = dataset, method="rf", metric=metric, tuneGrid=grid, trControl=trainControl)
fit.RF_tuned
trainControl = trainControl(method="repeatedcv", number=10, repeats=3)
metric = "Accuracy"
#XGB
set.seed(7)
grid = expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
fit.XGB_tuned = train(Is_Fraud~.,data = dataset, method="xgbTree", metric=metric, tuneGrid=grid, trControl=trainControl)
fit.XGB_tuned
trainControl = trainControl(method="repeatedcv", number=5, repeats=1)
metric = "Accuracy"
#KNN
set.seed(7)
grid = expand.grid(k = seq(1,10, by=1))
fit.KNN_tuned = train(Is_Fraud~.,data = dataset, method="knn", metric=metric, tuneGrid=grid, trControl=trainControl)
fit.KNN_tuned
trainControl = trainControl(method="repeatedcv", number=10, repeats=3)
metric = "Accuracy"
#KNN
set.seed(7)
grid = expand.grid(k = seq(1,10, by=1))
fit.KNN_tuned = train(Is_Fraud~.,data = dataset, method="knn", metric=metric, tuneGrid=grid, trControl=trainControl)
fit.KNN_tuned
rfPredict = predict(fit.RF_tuned, newdata = validation)
confusionMatrix(factor(rfPredict), factor(validationX$Is_Fraud))
rfPredict = predict(fit.RF_tuned, newdata = validation)
confusionMatrix(factor(rfPredict), factor(validation$Is_Fraud))
xgbPredict = predict(fit.xgbTree, newdata = validation)
confusionMatrix(factor(xgbPredict), factor(validation$Is_Fraud))
knnPredict = predict(fit.KNN_tuned, newdata = validation)
confusionMatrix(factor(knnPredict), factor(validation$Is_Fraud))
library(PRROC)
sapply(rfPredict, class)
sapply(validation, class)
pred = as.numeric(as.character(rfPredict))
valid = as.character(as.factor(validation$Is_Fraud))
valid = as.numeric(as.character(validation$Is_Fraud))
prroc_obj = roc.curve(scores.class0 = pred, weights.class0 = valid, curve = TRUE)
prroc_obj1 = pr.curve(scores.class0 = pred, weights.class0 = NULL, curve = TRUE)
plot(prroc_obj)
plot(prroc_obj1)
library(PRROC)
sapply(xgbPredict, class)
sapply(validation, class)
pred = as.numeric(as.character(xgbPredict))
valid = as.character(as.factor(validation$Is_Fraud))
valid = as.numeric(as.character(validation$Is_Fraud))
prroc_obj = roc.curve(scores.class0 = pred, weights.class0 = valid, curve = TRUE)
plot(prroc_obj)
plot(prroc_obj1)
library(PRROC)
sapply(predictions, class)
library(PRROC)
sapply(knnPredict, class)
sapply(validation, class)
pred = as.numeric(as.character(knnPredict))
valid = as.character(as.factor(validation$Is_Fraud))
valid = as.numeric(as.character(validation$Is_Fraud))
prroc_obj = roc.curve(scores.class0 = pred, weights.class0 = valid, curve = TRUE)
prroc_obj1 = pr.curve(scores.class0 = pred, weights.class0 = NULL, curve = TRUE)
plot(prroc_obj)
plot(prroc_obj1)
knit_with_parameters("C:/Users/TOBI/Downloads/Final Year Projects/New Project Latest Codes/Final Year Project Codes.Rmd")
unlink("Final Year Project Codes_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/farom/Downloads/School/Final Year Projects/New Project Latest Codes")
creditcard = read.csv("User0_credit_card_transactions.csv")
names(creditcard)
creditcard = creditcard[,-c(1:3,5,9:10,12,14)]
names(creditcard)
library(dplyr) # A grammar for data manipulation
creditcard = creditcard %>%
rename(
Is_Fraud = Is.Fraud.,
Use_Chip = Use.Chip,
Transaction_Time = Time,
Merchant_State = Merchant.State
)
summary(creditcard)
str(creditcard)
Multicreditcard = cbind.data.frame(creditcard)
summary(creditcard)
library(DataExplorer) # automate visual exploration of data and treatment
plot_intro(creditcard)
plot_missing(creditcard)
attach(creditcard)
library(tidyr)
"Transaction_Time"
creditcard <- creditcard %>%
separate(Transaction_Time, c("H", "M"), sep=":", remove = FALSE) %>%
mutate(H = as.numeric(H)) %>%
mutate(Transaction_Time = (H))
creditcard = creditcard[,-c(3:4)]
"Amount"
table(Amount)
creditcard$Amount = as.integer(creditcard$Amount)
"Merchant_State"
table(Merchant_State)
creditcard$Merchant_State = as.character(creditcard$Merchant_State)
creditcard$Merchant_State[creditcard$Merchant_State == "CA"] <- 1
creditcard$Merchant_State[creditcard$Merchant_State == "NE"] <- 2
creditcard$Merchant_State[creditcard$Merchant_State == "IL"] <- 3
creditcard$Merchant_State[creditcard$Merchant_State == "MO"] <- 4
creditcard$Merchant_State[creditcard$Merchant_State == "Switzerland"] <- 5
creditcard$Merchant_State[creditcard$Merchant_State == "IA"] <- 6
creditcard$Merchant_State[creditcard$Merchant_State == "TX"] <- 7
creditcard$Merchant_State[creditcard$Merchant_State == "Estonia"] <- 8
creditcard$Merchant_State[creditcard$Merchant_State == "NJ"] <- 9
creditcard$Merchant_State[creditcard$Merchant_State == "NV"] <- 10
creditcard$Merchant_State[creditcard$Merchant_State == "NY"] <- 11
creditcard$Merchant_State[creditcard$Merchant_State == "Japan"] <- 12
creditcard$Merchant_State[creditcard$Merchant_State == "AZ"] <- 13
creditcard$Merchant_State[creditcard$Merchant_State == "UT"] <- 14
creditcard$Merchant_State[creditcard$Merchant_State == "FL"] <- 15
creditcard$Merchant_State[creditcard$Merchant_State == "MI"] <- 16
creditcard$Merchant_State[creditcard$Merchant_State == "Mexico"] <- 17
creditcard$Merchant_State[creditcard$Merchant_State == "WA"] <- 18
creditcard$Merchant_State[creditcard$Merchant_State == "OH"] <- 19
creditcard$Merchant_State[creditcard$Merchant_State == "Dominican Republic"] <- 20
creditcard$Merchant_State[creditcard$Merchant_State == "NM"] <- 21
creditcard$Merchant_State[creditcard$Merchant_State == "China"] <- 22
creditcard$Merchant_State[creditcard$Merchant_State == "SC"] <- 23
creditcard$Merchant_State[creditcard$Merchant_State == "AK"] <- 24
creditcard$Merchant_State[creditcard$Merchant_State == "PA"] <- 25
creditcard$Merchant_State[creditcard$Merchant_State == "VA"] <- 26
creditcard$Merchant_State[creditcard$Merchant_State == "Portugal"] <- 27
creditcard$Merchant_State[creditcard$Merchant_State == "HI"] <- 28
creditcard$Merchant_State[creditcard$Merchant_State == "CT"] <- 29
creditcard$Merchant_State[creditcard$Merchant_State == "MA"] <- 30
creditcard$Merchant_State[creditcard$Merchant_State == "MN"] <- 31
creditcard$Merchant_State[creditcard$Merchant_State == "CO"] <- 32
creditcard$Merchant_State[creditcard$Merchant_State == "Italy"] <- 33
creditcard$Merchant_State[creditcard$Merchant_State == "GA"] <- 34
creditcard$Merchant_State[creditcard$Merchant_State == "Philippines"] <- 35
creditcard$Merchant_State[creditcard$Merchant_State == "Jamaica"] <- 36
creditcard$Merchant_State[creditcard$Merchant_State == "AR"] <- 37
creditcard$Merchant_State[creditcard$Merchant_State == "Canada"] <- 38
creditcard$Merchant_State[creditcard$Merchant_State == "OR"] <- 39
creditcard$Merchant_State[creditcard$Merchant_State == "WI"] <- 40
creditcard$Merchant_State = as.integer(creditcard$Merchant_State)
"Use_Chip"
table(Use_Chip)
creditcard$Use_Chip = as.character(creditcard$Use_Chip)
creditcard$Use_Chip[creditcard$Use_Chip == "Swipe Transaction"] <- 1
creditcard$Use_Chip[creditcard$Use_Chip == "Online Transaction"] <- 2
creditcard$Use_Chip[creditcard$Use_Chip == "Chip Transaction"] <- 3
creditcard$Use_Chip = as.integer(creditcard$Use_Chip)
"Is_Fraud"
table(Is_Fraud)
creditcard$Is_Fraud = as.character(creditcard$Is_Fraud)
creditcard$Is_Fraud[creditcard$Is_Fraud == "No"] <- 0
creditcard$Is_Fraud[creditcard$Is_Fraud == "Yes"] <- 1
creditcard$Is_Fraud = as.integer(creditcard$Is_Fraud)
str(creditcard)
summary(creditcard)
summary(creditcard)
library(DataExplorer) # automate visual exploration of data and treatment
plot_intro(creditcard)
plot_missing(creditcard)
creditcard <- na.omit(creditcard)
Multicreditcard <-na.omit(Multicreditcard)
# Function to visualize histogram and boxplot of numerical variables using ggplot
library(ggplot2) # For graphs and visualizations
library(gridExtra) # To plot multiple ggplot graphs in a grid
plot_histogram_n_boxplot = function(variable, variableNameString, binw){
h = ggplot(data = creditcard, aes(x= variable))+
labs(x = variableNameString,y ='count')+
geom_histogram(fill = 'dark green',col = 'black',binwidth = binw)+
geom_vline(aes(xintercept = mean(variable)),color="red", linetype="dashed", size=1)
b = ggplot(data = creditcard, aes('',variable))+
geom_boxplot(outlier.colour = 'blue',col = 'red',outlier.shape = 19)+
labs(x = '',y = variableNameString)+ coord_flip()
grid.arrange(h,b,ncol = 1)
}
plot_histogram_n_boxplot(creditcard$Month, 'Month', 1)
plot_histogram_n_boxplot(creditcard$Transaction_Time, 'Transaction Time', 1)
ggplot(creditcard, aes(x=Amount)) + geom_density() + geom_vline(aes(xintercept = mean(Amount)),color="red", linetype="dashed", size=1)
ggplot(creditcard, aes(group=1, x=Amount, outlier.colour = 'blue',col = 'blue',outlier.shape = 19)) + geom_boxplot()
plot_histogram_n_boxplot(creditcard$Use_Chip, 'Use Chip', 1)
plot_histogram_n_boxplot(creditcard$Merchant_State, 'Merchant State', 1)
ggplot(creditcard, aes(x=MCC)) + geom_density() + geom_vline(aes(xintercept = mean(MCC)),color="red", linetype="dashed", size=1)
ggplot(creditcard, aes(group=1, x=MCC, outlier.colour = 'blue',col = 'blue',outlier.shape = 19)) + geom_boxplot()
plot_histogram_n_boxplot(creditcard$Is_Fraud, 'Is_Fraud', 1)
library(ggplot2)
plot_stacked_barchart = function(variable, variableNameString){
ggplot(Multicreditcard, aes(fill = Is_Fraud, x = variable)) +
geom_bar(position="fill")+
labs(title = variableNameString, y = '', x = '')+
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF"))
}
plot_stacked_barchart(Multicreditcard$Month, 'Month')
plot_stacked_barchart(Multicreditcard$Amount, 'Amount')
plot_stacked_barchart(Multicreditcard$Use_Chip, 'Use Chip')
plot_stacked_barchart(Multicreditcard$Merchant_State, 'Merchant State')
library(psych) # multivariate analysis, FA and PCA
library(corrplot)
corr.test(creditcard) # for all features
M = cor(creditcard)
corrplot(M, method = 'number')
# Check the correlation significance levels of the features
# Transaction features
cor.test(creditcard$Is_Fraud,creditcard$Month)$p.value #significant
cor.test(creditcard$Is_Fraud,creditcard$Transaction_Time)$p.value #Not significant
cor.test(creditcard$Is_Fraud,creditcard$Amount)$p.value #Not significant
cor.test(creditcard$Is_Fraud,creditcard$Use_Chip)$p.value #Not significant
cor.test(creditcard$Is_Fraud,creditcard$Merchant_State)$p.value #Not significant
cor.test(creditcard$Is_Fraud,creditcard$MCC)$p.value #significant
library(mlbench)
library(caret)
creditcard$Is_Fraud = as.factor(as.integer(creditcard$Is_Fraud))
library(ROSE)
creditcard_balanced_over <- ovun.sample(Is_Fraud ~ ., data = creditcard, method = "both",N = 19963)$data
table(creditcard_balanced_over$Is_Fraud)
library(Boruta)
# Feature Selection operation
set.seed(7)
boruta = Boruta(creditcard_balanced_over$Is_Fraud~.,data = creditcard_balanced_over, doTrace = 5, maxRuns = 100)
plot(boruta, las = 2, cex.axis = 0.5)
attStats(boruta)
# create object and limit features to the 5 confirmed features from the boruta analysis + the dependent variable
col_order = c("Month", "Transaction_Time", "Amount", "Use_Chip","Merchant_State","MCC","Is_Fraud")
View(creditcard_balanced_over)
creditcard_balanced_over = creditcard_balanced_over[, col_order]
str(creditcard_balanced_over)
levels(creditcard_balanced_over$Is_Fraud)
#Not a fraudulent transaction
No = creditcard_balanced_over[creditcard_balanced_over$Is_Fraud == 0,]
#A fraudulent transaction
Yes = creditcard_balanced_over[creditcard_balanced_over$Is_Fraud == 1,]
set.seed(7)
validationIndex = createDataPartition(creditcard_balanced_over$Is_Fraud, p=0.70, list = FALSE)
#select 30% of the data for validation
validation = creditcard_balanced_over[-validationIndex,]
#use the remaining 70% of data to train the model
dataset = creditcard_balanced_over[validationIndex,]
# Check that the distribution of the dependent variable is similar in train and test sets
prop.table(table(creditcard_balanced_over$Is_Fraud))
prop.table(table(dataset$Is_Fraud))
prop.table(table(validation$Is_Fraud))
trainControl = trainControl(method = "repeatedcv", number = 10, repeats = 3)
metric = "Accuracy"
#1 LG
set.seed(7)
fit.glm = train(Is_Fraud~., data=dataset, method="glm", metric=metric, trControl=trainControl)
#2 LDA
set.seed(7)
fit.lda = train(Is_Fraud~., data=dataset, method="lda", metric=metric, trControl=trainControl)
#3 NB
set.seed(7)
fit.naive_bayes = train(Is_Fraud~., data=dataset, method="naive_bayes", metric=metric, trControl=trainControl)
#4 SVM
set.seed(7)
fit.svmLinear = train(Is_Fraud~., data=dataset, method="svmLinear", metric=metric, trControl=trainControl)
#5 XGB
set.seed(7)
fit.xgbTree = train(Is_Fraud~., data=dataset, method="xgbTree", metric=metric, trControl=trainControl)
#6 KNN
set.seed(7)
fit.knn = train(Is_Fraud~., data=dataset, method="knn", metric=metric, trControl=trainControl)
#7 CART
set.seed(7)
fit.cart = train(Is_Fraud~., data=dataset, method="rpart", metric=metric, trControl=trainControl)
#8 Random Forest
set.seed(7)
fit.rf = train(Is_Fraud~., data=dataset, method="rf", metric=metric, trControl = trainControl)
# Compare algorithms
results = resamples(list(LG=fit.glm, LDA=fit.lda, NB=fit.naive_bayes, SVM=fit.svmLinear, XGB=fit.xgbTree, KNN=fit.knn, CART=fit.cart, RF=fit.rf))
summary(results)
dotplot(results)
trainControl = trainControl(method="repeatedcv", number=10, repeats=3)
metric = "Accuracy"
#RF
set.seed(7)
grid = expand.grid(mtry = seq(1,10, by=1))
fit.RF_tuned = train(Is_Fraud~.,data = dataset, method="rf", metric=metric, tuneGrid=grid, trControl=trainControl)
trainControl = trainControl(method="repeatedcv", number=10, repeats=3)
metric = "Accuracy"
#XGB
set.seed(7)
grid = expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
fit.XGB_tuned = train(Is_Fraud~.,data = dataset, method="xgbTree", metric=metric, tuneGrid=grid, trControl=trainControl)
fit.XGB_tuned
trainControl = trainControl(method="repeatedcv", number=10, repeats=3)
metric = "Accuracy"
#KNN
set.seed(7)
grid = expand.grid(k = seq(1,10, by=1))
fit.KNN_tuned = train(Is_Fraud~.,data = dataset, method="knn", metric=metric, tuneGrid=grid, trControl=trainControl)
fit.KNN_tuned
rfPredict = predict(fit.RF_tuned, newdata = validation)
trainControl = trainControl(method="repeatedcv", number=10, repeats=3)
metric = "Accuracy"
#RF
set.seed(7)
grid = expand.grid(mtry = seq(1,10, by=1))
fit.RF_tuned = train(Is_Fraud~.,data = dataset, method="rf", metric=metric, tuneGrid=grid, trControl=trainControl)
fit.RF_tuned
rfPredict = predict(fit.rf, newdata = validation)
confusionMatrix(factor(rfPredict), factor(validation$Is_Fraud))
xgbPredict = predict(fit.xgbTree, newdata = validation)
confusionMatrix(factor(xgbPredict), factor(validation$Is_Fraud))
knnPredict = predict(fit.KNN_tuned, newdata = validation)
confusionMatrix(factor(knnPredict), factor(validation$Is_Fraud))
library(PRROC)
sapply(rfPredict, class)
sapply(validation, class)
pred = as.numeric(as.character(rfPredict))
valid = as.character(as.factor(validation$Is_Fraud))
valid = as.numeric(as.character(validation$Is_Fraud))
prroc_obj = roc.curve(scores.class0 = pred, weights.class0 = valid, curve = TRUE)
prroc_obj1 = pr.curve(scores.class0 = pred, weights.class0 = NULL, curve = TRUE)
plot(prroc_obj)
plot(prroc_obj1)
library(PRROC)
sapply(xgbPredict, class)
sapply(validation, class)
pred = as.numeric(as.character(xgbPredict))
valid = as.character(as.factor(validation$Is_Fraud))
valid = as.numeric(as.character(validation$Is_Fraud))
prroc_obj = roc.curve(scores.class0 = pred, weights.class0 = valid, curve = TRUE)
plot(prroc_obj)
plot(prroc_obj1)
library(PRROC)
sapply(knnPredict, class)
sapply(validation, class)
pred = as.numeric(as.character(knnPredict))
valid = as.character(as.factor(validation$Is_Fraud))
valid = as.numeric(as.character(validation$Is_Fraud))
prroc_obj = roc.curve(scores.class0 = pred, weights.class0 = valid, curve = TRUE)
prroc_obj1 = pr.curve(scores.class0 = pred, weights.class0 = NULL, curve = TRUE)
plot(prroc_obj)
plot(prroc_obj1)
shiny::runApp('FraudDetection')
runApp('FraudDetection')
runApp('FraudDetection')
runApp('FraudDetection')
runApp('FraudDetection')
